import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
import concurrent.futures
import logging
import datetime
import os
import ConfigParser

logger = logging.getLogger(__name__)

MAX_THREADS = 14

Config = ConfigParser.ConfigParser()
Config.read(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'settings.ini'))
snow_user = Config.get('Settings', 'Tenable_Computer_Table_User')
snow_password = Config.get('Settings', 'Tenable_Computer_Table_Secret')
service_now_computer_table = Config.get('Settings', 'Tenable_API')


# Generate session with max of 3 retries and interval of 1 second
def session_generator():
    session = requests.Session()
    retry = Retry(connect=3, backoff_factor=0.5)
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session


# Class to define and work on the fields from the Computers cmdb table
class active_servers:
    def __init__(self):
        self.id = None
        self.name = ""
        self.dns = ""
        self.os = ""
        self.last_connected = ""
        self.internal_ip = ""
        self.discovery_source = ""


# Parse response for each device from Computers
def parse_asset_results(asset):
    serverobj = active_servers()
    if not asset['name']:
        logger.critical('Name is empty for sys id: %s' % asset['sys_id'])
        exit(-1)

    serverobj.id = asset['sys_id']
    serverobj.name = asset['name']
    serverobj.dns = asset['fqdn']
    serverobj.os = asset['os']
    serverobj.last_connected = asset['last_discovered']
    serverobj.internal_ip = asset['ip_address']
    serverobj.discovery_source = asset['discovery_source']
    serverobj.created_on = asset['sys_created_on']
    if not serverobj.last_connected:
        return None
    return serverobj


# A hack to get the total number of devices
def get_assets_total():
    logger.info('Fetching total number of assets from Snow')
    total = 0
    headers = {"Accept": "application/json", "Content-Type": "application/json;charset=UTF-8"}
    # Fetch only 1 device
    params = {"sysparm_limit": '1',
              'sysparm_query': 'nameISNOTEMPTY^install_statusNOT IN9,7,8^os!=null',
              'sysparm_fields': 'sys_id,name,os,last_discovered,ip_address,discovery_source,sys_created_on,fqdn'}

    session = session_generator()
    resp = session.get(service_now_computer_table, auth=(snow_user, snow_password), headers=headers, params=params)
    if resp.ok:
        total = resp.headers['X-Total-Count']
    else:
        logger.error('Unable to make the api call to fetch 1 device details')
        logger.error('Snow Error %d:%s', resp.status_code, resp.text)
    return total


# Get all devices from Computers
def get_all_assets(total_count):
    assets = []
    offsets = [offset for offset in range(0, int(total_count), 10000)]
    for offset in offsets:
        headers = {"Accept": "application/json", "Content-Type": "application/json;charset=UTF-8"}
        # Asset is not stolen, retired or lost
        params = {
                  'sysparm_query': 'nameISNOTEMPTY^install_statusNOT IN9,7,8^os!=null',
                  'sysparm_offset': str(offset),
                  'sysparm_limit': '10000',
                  'sysparm_fields': 'sys_id,name,os,last_discovered,ip_address,discovery_source,sys_created_on,fqdn'}

        session = session_generator()
        resp = session.get(service_now_computer_table, auth=(snow_user, snow_password), headers=headers, params=params)
        if resp.ok:
            response = resp.json()
            if response['result']:
                # Perform multi-threading to parse each device details
                logger.info('Populating device details')
                with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
                    for deviceobj in executor.map(parse_asset_results, response['result']):
                        if deviceobj is not None:
                            assets.append(deviceobj)
            else:
                logger.info('No devices found in the table.')
        else:
            logger.error('Snow Error %d:%s', resp.status_code, resp.text)
    return assets


# Fetch assets from the computer table
def fetch_categorized_servers():
    total_count = get_assets_total()
    logger.info('Found %s devices from service now' % total_count)
    if int(total_count) > 0:
        servers = get_all_assets(total_count)

        if servers:
            for server in servers:
                if '.' not in server.name and server.dns:
                    server.name = server.dns
                if not server.dns:
                    server.dns = server.name
            active_servers = {server.internal_ip: [server.os, server.name] for server in servers if (datetime.datetime.utcnow() - datetime.datetime.strptime(server.last_connected, '%Y-%m-%d %H:%M:%S')).days > 15}
            return active_servers
    return {}
