import logging
import drive
import datetime
import sheet
from typing import List, Dict, Tuple
import ConfigParser
import os

logger = logging.getLogger(__name__)

Config = ConfigParser.ConfigParser()
Config.read(os.path.join(os.path.abspath(os.path.dirname(__file__)), 'settings.ini'))
google_user_for_service_account = Config.get('Settings', 'Google_User_For_Project')
google_team_drive = Config.get('Settings', 'Gdrive_Team_Drive')
gdrive_folder_in_team_drive = Config.get('Settings', 'GDrive_Vulnerabilty_Management_Folder')


# Creates root folder that will contain vulnerability report
def check_and_create_report_root_folders() -> Tuple[str, str]:
    drive_id = drive.find_drive(google_team_drive, google_user_for_service_account)

    # Check main folder in Security Engineering
    root_folder_id = drive.find_folder(gdrive_folder_in_team_drive, google_user_for_service_account, drive_id)
    year = datetime.datetime.now().strftime('%Y')
    month_year = datetime.datetime.now().strftime('%B - %Y')

    if root_folder_id is not None:
        # Check year folder in main folder
        sub_folder_id = drive.find_folder(year, google_user_for_service_account, drive_id, root_folder_id)

        if sub_folder_id is not None:
            # Check month year folder in year sub-folder
            sub_sub_folder_id = drive.find_folder(month_year, google_user_for_service_account, drive_id, sub_folder_id)

            if sub_sub_folder_id is None:
                sub_sub_folder_id = drive.create_file(sub_folder_id, month_year, 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        else:
            sub_folder_id = drive.create_file(root_folder_id, year, 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
            sub_sub_folder_id = drive.create_file(sub_folder_id, month_year, 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

    else:
        root_folder_id = drive.create_file(root_folder_id, gdrive_folder_in_team_drive, 'application/vnd.google-apps.folder', drive.google_user_for_service_account, drive_id)
        sub_folder_id = drive.create_file(root_folder_id, year, 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        sub_sub_folder_id = drive.create_file(sub_folder_id, month_year, 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

    return drive_id, sub_sub_folder_id


def check_and_create_report_prod_folders(drive_id: str, sub_sub_folder_id: str) -> Tuple[str, str, str]:
    # Check Production Folder
    production_folder_id = drive.find_folder('Production', google_user_for_service_account, drive_id, sub_sub_folder_id)

    if production_folder_id is not None:
        # Check GCP Folder
        prod_gcp_folder_id = drive.find_folder('GCP', google_user_for_service_account, drive_id, production_folder_id)

        if prod_gcp_folder_id is None:
            prod_gcp_folder_id = drive.create_file(production_folder_id, 'GCP', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

        # Check Windows Folder Prod
        prod_windows_folder_id = drive.find_folder('Windows', google_user_for_service_account, drive_id, production_folder_id)
        if prod_windows_folder_id is None:
            prod_windows_folder_id = drive.create_file(production_folder_id, 'Windows', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

        # Check Linux Folder
        prod_linux_folder_id = drive.find_folder('Linux', google_user_for_service_account, drive_id, production_folder_id)
        if prod_linux_folder_id is None:
            prod_linux_folder_id = drive.create_file(production_folder_id, 'Linux', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

    else:
        production_folder_id = drive.create_file(sub_sub_folder_id, 'Production', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        prod_windows_folder_id = drive.create_file(production_folder_id, 'Windows', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        prod_linux_folder_id = drive.create_file(production_folder_id, 'Linux', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        prod_gcp_folder_id = drive.create_file(production_folder_id, 'GCP', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
    return prod_gcp_folder_id, prod_windows_folder_id, prod_linux_folder_id


def check_and_create_report_corp_folders(drive_id: str, sub_sub_folder_id: str) -> Tuple[str, str]:
    # Check Corporate Folder
    corporate_folder_id = drive.find_folder('Corporate', google_user_for_service_account, drive_id, sub_sub_folder_id)

    if corporate_folder_id is not None:
        # Check Windows Folder Corporate
        corp_windows_folder_id = drive.find_folder('Windows', google_user_for_service_account, drive_id, corporate_folder_id)
        if corp_windows_folder_id is None:
            corp_windows_folder_id = drive.create_file(corporate_folder_id, 'Windows', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

        # Check Mac Folder Corporate
        corp_mac_folder_id = drive.find_folder('Macs', google_user_for_service_account, drive_id, corporate_folder_id)
        if corp_mac_folder_id is None:
            corp_mac_folder_id = drive.create_file(corporate_folder_id, 'Macs', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

    else:
        corporate_folder_id = drive.create_file(sub_sub_folder_id, 'Corporate', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        corp_windows_folder_id = drive.create_file(corporate_folder_id, 'Windows', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)
        corp_mac_folder_id = drive.create_file(corporate_folder_id, 'Macs', 'application/vnd.google-apps.folder', google_user_for_service_account, drive_id)

    return corp_windows_folder_id, corp_mac_folder_id


def generate_windows_package_report(report_name: str, vulnerabilities: List, folder_id: str, drive_id: str) -> None:
    package_rows = []
    package_rows.append('Device,Criticality,Vulnerability,KB,CVE,Info'.split(','))
    package_sheet_id = drive.create_file(folder_id, 'KB_%s' % report_name, 'application/vnd.google-apps.spreadsheet', google_user_for_service_account, drive_id)

    update_rows = []
    update_rows.append('Device,Criticality,Vulnerability,Solution,CVE,Info'.split(','))
    update_sheet_id = drive.create_file(folder_id, 'Software_Update_%s' % report_name, 'application/vnd.google-apps.spreadsheet', google_user_for_service_account, drive_id)

    if package_sheet_id is not None and update_sheet_id is not None:
        criticality_of_vulnerabilities = categorize_vulnerabilities_on_criticality(vulnerabilities)

        for category in criticality_of_vulnerabilities:

            kb_patch_vulnerabilities = []
            update_patch_vulnerabilities = []
            for vulnerability in criticality_of_vulnerabilities[category]:
                if 'KB' in vulnerability.resolution[:3]:
                    kb_patch_vulnerabilities.append(vulnerability)
                else:
                    update_patch_vulnerabilities.append(vulnerability)

            kb_patch_devices = {}
            '''
            {
                testhost.com: {
    
                KB: []
                Plugin Name: []
                CVE: []
                Link: []
                Critcality: ''
                }
    
            }
            '''
            update_patch_device = {}

            for vulnerability in kb_patch_vulnerabilities:
                if 'centos' not in vulnerability.plugin_name.lower():
                    if vulnerability.dns:
                        if vulnerability.dns in kb_patch_devices:
                            kb_patch_devices[vulnerability.dns].append(vulnerability)
                        else:
                            kb_patch_devices[vulnerability.dns] = [vulnerability]
                    else:
                        if vulnerability.ip in kb_patch_devices:
                            kb_patch_devices[vulnerability.ip].append(vulnerability)
                        else:
                            kb_patch_devices[vulnerability.ip] = [vulnerability]

            for vulnerability in update_patch_vulnerabilities:
                if 'centos' not in vulnerability.plugin_name.lower():
                    if vulnerability.dns:
                        if vulnerability.dns in update_patch_device:
                            update_patch_device[vulnerability.dns].append(vulnerability)
                        else:
                            update_patch_device[vulnerability.dns] = [vulnerability]
                    else:
                        if vulnerability.ip in update_patch_device:
                            update_patch_device[vulnerability.ip].append(vulnerability)
                        else:
                            update_patch_device[vulnerability.ip] = [vulnerability]

            logger.info('Found %d devices that marked as %s for KB patches' % (len(kb_patch_devices), category))
            logger.info('Found %d devices that marked as %s for updates' % (len(update_patch_device), category))

            for device in kb_patch_devices:
                KB = []
                plugins = []
                cves = []
                info_links = []
                for vulnerability in kb_patch_devices[device]:
                    KB.extend(vulnerability.resolution.split(','))
                    plugins.append(vulnerability.plugin_name)
                    if vulnerability.cves:
                        cves.extend(vulnerability.cves)
                    info_links.extend(vulnerability.additional_links)

                KB = '\r'.join(list(set(KB))).replace("'", '').replace('"', '')
                plugins = '\r'.join(list(set(plugins))).replace("'", '').replace('"', '')
                cves = ', '.join(list(set(cves))).replace("'", '').replace('"', '')
                info_links = '\r'.join(list(set(info_links))).replace("'", '').replace('"', '')
                package_rows.append(("%s|%s|%s|%s|%s|%s" % (device, category, plugins, KB, cves, info_links)).split('|'))

            for device in update_patch_device:
                solution = []
                plugins = []
                cves = []
                info_links = []
                for vulnerability in update_patch_device[device]:
                    solution.append(vulnerability.resolution)
                    plugins.append(vulnerability.plugin_name)
                    if vulnerability.cves:
                        cves.extend(vulnerability.cves)
                    info_links.extend(vulnerability.additional_links)

                solution = '\r'.join(list(set(solution))).replace("'", '').replace('"', '')
                plugins = '\r'.join(list(set(plugins))).replace("'", '').replace('"', '')
                cves = ', '.join(list(set(cves))).replace("'", '').replace('"', '')
                info_links = '\r'.join(list(set(info_links))).replace("'", '').replace('"', '')
                update_rows.append(("%s|%s|%s|%s|%s|%s" % (device, category, plugins, solution, cves, info_links)).split('|'))

        sheet.update_sheet('KB_%s' % report_name, package_rows, google_user_for_service_account, package_sheet_id)
        sheet.update_sheet('Software_Update_%s' % report_name, update_rows, google_user_for_service_account, update_sheet_id)


def generate_linux_package_report(report_name: str, vulnerabilities: List, folder_id: str, drive_id: str) -> None:
    rows = []
    rows.append('Device,Criticality,Vulnerability,Upgrade/Update,CVE,Info'.split(','))
    sheet_id = drive.create_file(folder_id, report_name, 'application/vnd.google-apps.spreadsheet',
                                         google_user_for_service_account, drive_id)
    if sheet_id is not None:

        criticality_of_vulnerabilities = categorize_vulnerabilities_on_criticality(vulnerabilities)

        for category in criticality_of_vulnerabilities:
            devices = {}
            for vulnerability in criticality_of_vulnerabilities[category]:
                if vulnerability.dns:
                    if vulnerability.dns in devices:
                        devices[vulnerability.dns].append(vulnerability)
                    else:
                        devices[vulnerability.dns] = [vulnerability]
                else:
                    if vulnerability.ip in devices:
                        devices[vulnerability.ip].append(vulnerability)
                    else:
                        devices[vulnerability.ip] = [vulnerability]

            logger.info('Found %d devices that marked as %s for linux security updates' % (len(devices), category))
            for device in devices:
                packages = []
                plugins = []
                cves = []
                info_links = []
                for vulnerability in devices[device]:
                    packages.extend(vulnerability.resolution.split(','))
                    plugins.append(vulnerability.plugin_name)
                    if vulnerability.cves:
                        cves.extend(vulnerability.cves)
                    info_links.extend(vulnerability.additional_links)

                packages = '\r'.join(list(set(packages))).replace("'", '').replace('"', '')
                plugins = '\r'.join(list(set(plugins))).replace("'", '').replace('"', '')
                cves = ', '.join(list(set(cves))).replace("'", '').replace('"', '')
                info_links = '\r'.join(list(set(info_links))).replace("'", '').replace('"', '')
                rows.append(("%s|%s|%s|%s|%s|%s" % (device, category, plugins, packages, cves, info_links)).split('|'))
        sheet.update_sheet(report_name, rows, google_user_for_service_account, sheet_id)


def generate_config_report(report_name: str, vulnerabilities: List, folder_id: str, drive_id: str) -> None:
    rows = []
    rows.append('Device,Criticality,Vulnerability,Changes,CVE,Info'.split(','))
    sheet_id = drive.create_file(folder_id, 'Change_Configuration_%s' % report_name, 'application/vnd.google-apps.spreadsheet',
                                         google_user_for_service_account, drive_id)
    if sheet_id is not None:
        criticality_of_vulnerabilities = categorize_vulnerabilities_on_criticality(vulnerabilities)

        for category in criticality_of_vulnerabilities:
            devices = {}
            for vulnerability in criticality_of_vulnerabilities[category]:
                if vulnerability.dns:
                    if vulnerability.dns in devices:
                        devices[vulnerability.dns].append(vulnerability)
                    else:
                        devices[vulnerability.dns] = [vulnerability]
                else:
                    if vulnerability.ip in devices:
                        devices[vulnerability.ip].append(vulnerability)
                    else:
                        devices[vulnerability.ip] = [vulnerability]
            logger.info('Found %d devices that marked as %s for config updates' % (len(devices), category))
            for device in devices:
                changes = []
                plugins = []
                cves = []
                info_links = []
                for vulnerability in devices[device]:
                    changes.extend(vulnerability.resolution.split(','))
                    plugins.append(vulnerability.plugin_name)
                    if vulnerability.cves:
                        cves.extend(vulnerability.cves)
                    info_links.extend(vulnerability.additional_links)

                changes = '\r'.join(list(set(changes))).replace("'", '').replace('"', '')
                plugins = '\r'.join(list(set(plugins))).replace("'", '').replace('"', '')
                cves = ', '.join(list(set(cves))).replace("'", '').replace('"', '')
                info_links = '\r'.join(list(set(info_links))).replace("'", '').replace('"', '')
                rows.append(("%s|%s|%s|%s|%s|%s" % (device, category, plugins, changes, cves, info_links)).split('|'))
        sheet.update_sheet(report_name, rows, google_user_for_service_account, sheet_id)


def generate_general_report(report_name: str, vulnerabilities: List, folder_id: str, drive_id: str) -> None:
    rows = []
    sheet_id = drive.create_file(folder_id, report_name, 'application/vnd.google-apps.spreadsheet', google_user_for_service_account, drive_id)
    if sheet_id is not None:
        rows.append('Device,Criticality,Vulnerability,Solution,CVE,Info'.split(','))
        criticality_of_vulnerabilities = categorize_vulnerabilities_on_criticality(vulnerabilities)

        for category in criticality_of_vulnerabilities:
            solutions = {}
            for vulnerability in criticality_of_vulnerabilities[category]:
                if vulnerability.resolution in solutions:
                    solutions[vulnerability.resolution].append(vulnerability)
                else:
                    solutions[vulnerability.resolution] = [vulnerability]

            for solution in solutions:
                devices = []
                plugins = []
                cves = []
                info_links = []
                for vulnerability in solutions[solution]:
                    devices.append(vulnerability.dns or vulnerability.ip)
                    plugins.append(vulnerability.plugin_name)
                    if vulnerability.cves:
                        cves.extend(vulnerability.cves)
                    info_links.extend(vulnerability.additional_links)

                plugins = '\r'.join(list(set(plugins))).replace("'", '').replace('"', '')
                cves = ', '.join(list(set(cves))).replace("'", '').replace('"', '')
                info_links = '\r'.join(list(set(info_links))).replace("'", '').replace('"', '')
                devices = list(set(devices))

                # Sheet can accept a max of 50000 characters in a single cell
                if len(str(devices)) > 45000:
                    number_in_each_block_list = int(len(devices)/(len(str(devices))/45000))
                    device_list = [devices[i:number_in_each_block_list] for i in range(0, len(devices), number_in_each_block_list)]
                    for each_list in device_list:
                        devices = '\r'.join(each_list).replace("'", '').replace('"', '')
                        rows.append(("%s|%s|%s|%s|%s|%s" % (devices, category, plugins, solution, cves, info_links)).split('|'))

                else:
                    devices = '\r'.join(devices).replace("'", '').replace('"', '')
                    rows.append(("%s|%s|%s|%s|%s|%s" % (devices, category, plugins, solution, cves, info_links)).split('|'))

        sheet.update_sheet(report_name, rows, google_user_for_service_account, sheet_id)


def categorize_vulnerabilities_on_criticality(vulnerabilities: List) -> Dict[str, List]:
    criticality_of_vulnerabilities = {
        'High': [],
        'Medium': [],
        'Low': []
    }

    for vulnerability in vulnerabilities:

        if vulnerability.actual_criticality == 'High':
            criticality_of_vulnerabilities['High'].append(vulnerability)
        elif vulnerability.actual_criticality == 'Medium':
            criticality_of_vulnerabilities['Medium'].append(vulnerability)
        elif vulnerability.actual_criticality == 'Low':
            criticality_of_vulnerabilities['Low'].append(vulnerability)
        else:
            if vulnerability.nessus_criticiality == 'High':
                criticality_of_vulnerabilities['High'].append(vulnerability)
            elif vulnerability.nessus_criticiality == 'Medium':
                criticality_of_vulnerabilities['Medium'].append(vulnerability)
            elif vulnerability.nessus_criticiality == 'Low':
                criticality_of_vulnerabilities['Low'].append(vulnerability)
    return criticality_of_vulnerabilities


def divide_linux_vulnerabilities_based_on_os_version(vulnerabilities: List) -> Dict[str, List]:
    os_flavors = list(set(vulnerability.os for vulnerability in vulnerabilities))
    categorized_on_os = {}
    for os in os_flavors:
        if os:
            categorized_on_os[os] = []

    categorized_on_os['Linux'] = []

    for vulnerability in vulnerabilities:
        if vulnerability.os:
            categorized_on_os[vulnerability.os].append(vulnerability)
        else:
            categorized_on_os['Linux'].append(vulnerability)

    return categorized_on_os


def generate_prod_reports(vulnerabilities: List, gcp: bool = False) -> None:
    drive.drive_access_tokens[google_user_for_service_account] = {}
    access_token, expiry = drive.generate_drive_api_access_token(google_user_for_service_account)
    if access_token is not None and expiry is not None:
        drive.drive_access_tokens[google_user_for_service_account]['access_token'] = access_token
        drive.drive_access_tokens[google_user_for_service_account]['expiry'] = expiry

    drive_id, folder_id = check_and_create_report_root_folders()
    if drive_id is not None and folder_id is not None:
        prod_gcp_folder_id, prod_windows_folder_id, prod_linux_folder_id = check_and_create_report_prod_folders(drive_id, folder_id)
    else:
        logger.info('Unable to find drive id and folder id')
        exit(-1)

    sheet.sheet_access_tokens[google_user_for_service_account] = {}
    access_token, expiry = sheet.generate_sheet_api_access_token(google_user_for_service_account)
    if access_token is not None and expiry is not None:
        sheet.sheet_access_tokens[google_user_for_service_account]['access_token'] = access_token
        sheet.sheet_access_tokens[google_user_for_service_account]['expiry'] = expiry

    server_windows_package_vulnerabilities = []
    server_windows_config_vulnerabilities = []
    server_linux_package_vulnerabilities = []
    server_linux_config_vulnerabilities = []

    logger.info('Dividing vulnerabilities into packages and configs')
    for vulnerability in vulnerabilities:
        if vulnerability.platform == 'Windows' and vulnerability.vulnerability_type == 'package':
            server_windows_package_vulnerabilities.append(vulnerability)
        elif vulnerability.platform == 'Windows' and vulnerability.vulnerability_type == 'config':
            server_windows_config_vulnerabilities.append(vulnerability)
        elif vulnerability.platform == 'Linux' and vulnerability.vulnerability_type == 'package':
            server_linux_package_vulnerabilities.append(vulnerability)
        elif vulnerability.platform == 'Linux' and vulnerability.vulnerability_type == 'config':
            server_linux_config_vulnerabilities.append(vulnerability)
    vulnerabilities.clear()

    logger.info('Dividing Linux Vulnerabilities based on OS')
    server_linux_package_vulnerabilities_based_on_os = divide_linux_vulnerabilities_based_on_os_version(server_linux_package_vulnerabilities)
    server_linux_config_vulnerabilities_based_on_os = divide_linux_vulnerabilities_based_on_os_version(server_linux_config_vulnerabilities)

    server_linux_package_vulnerabilities.clear()
    server_linux_config_vulnerabilities.clear()

    if not gcp:
        # Windows Packages
        logger.info('Generating reports for High, Medium & Low vulnerabilities for windows packages across dev, qa, test and prod')
        if server_windows_package_vulnerabilities and prod_windows_folder_id is not None:
            generate_windows_package_report('windows_package_%s' % datetime.date.today().isoformat().replace('-', ''), server_windows_package_vulnerabilities, prod_windows_folder_id, drive_id)
        server_windows_package_vulnerabilities.clear()

        # Windows Config
        logger.info('Generating reports for High, Medium & Low vulnerabilities for windows config across dev, qa, test and prod')
        if server_windows_config_vulnerabilities and prod_windows_folder_id is not None:
            generate_general_report('Windows_config_%s' % datetime.date.today().isoformat().replace('-', ''), server_windows_config_vulnerabilities, prod_windows_folder_id, drive_id)
        server_windows_config_vulnerabilities.clear()

        # Linux Packages
        logger.info('Generating reports for High, Medium & Low vulnerabilities for linux packages across dev, qa, test and prod')
        for os in server_linux_package_vulnerabilities_based_on_os:
            if server_linux_package_vulnerabilities_based_on_os[os] and prod_linux_folder_id is not None:
                generate_linux_package_report('Linux_package_%s_%s' % (os, datetime.date.today().isoformat().replace('-', '')), server_linux_package_vulnerabilities_based_on_os[os], prod_linux_folder_id, drive_id)
        server_linux_package_vulnerabilities_based_on_os.clear()

        # Linux Config
        logger.info('Generating reports for High, Medium & Low vulnerabilities for linux config across dev, qa, test and prod')
        for os in server_linux_config_vulnerabilities_based_on_os:
            if server_linux_config_vulnerabilities_based_on_os[os] and prod_linux_folder_id is not None:
                generate_general_report('Linux_config_%s_%s' % (os, datetime.date.today().isoformat().replace('-', '')), server_linux_config_vulnerabilities_based_on_os[os], prod_linux_folder_id, drive_id)
        server_linux_config_vulnerabilities_based_on_os.clear()

        #drive.assign_permission(prod_windows_folder_id, email, recipient)
    else:
        # GCP Windows Packages
        logger.info('Generating reports for High, Medium & Low vulnerabilities for GCP windows packages across dev, qa, test and prod')
        if server_windows_package_vulnerabilities and prod_gcp_folder_id is not None:
            generate_windows_package_report('windows_package_%s' % datetime.date.today().isoformat().replace('-', ''), server_windows_package_vulnerabilities, prod_gcp_folder_id, drive_id)
        server_windows_package_vulnerabilities.clear()

        # GCP Windows Config
        logger.info('Generating reports for High, Medium & Low vulnerabilities for GCP windows config across dev, qa, test and prod')
        if server_windows_config_vulnerabilities and prod_gcp_folder_id is not None:
            generate_general_report('Windows_config_%s' % datetime.date.today().isoformat().replace('-', ''), server_windows_config_vulnerabilities, prod_gcp_folder_id, drive_id)
        server_windows_config_vulnerabilities.clear()

        # GCP Linux Packages
        logger.info('Generating reports for High, Medium & Low vulnerabilities for GCP linux packages across dev, qa, test and prod')
        for os in server_linux_package_vulnerabilities_based_on_os:
            if server_linux_package_vulnerabilities_based_on_os[os] and prod_gcp_folder_id is not None:
                generate_linux_package_report('Linux_package_%s_%s' % (os, datetime.date.today().isoformat().replace('-', '')),
                                          server_linux_package_vulnerabilities_based_on_os[os], prod_gcp_folder_id, drive_id)
        server_linux_package_vulnerabilities_based_on_os.clear()

        # GCP Linux Config
        logger.info('Generating reports for High, Medium & Low vulnerabilities for GCP linux config across dev, qa, test and prod')
        for os in server_linux_config_vulnerabilities_based_on_os:
            if server_linux_config_vulnerabilities_based_on_os[os] and prod_gcp_folder_id is not None:
                generate_general_report('Linux_config_%s_%s' % (os,datetime.date.today().isoformat().replace('-', '')),
                                    server_linux_config_vulnerabilities_based_on_os[os], prod_gcp_folder_id, drive_id)
        server_linux_config_vulnerabilities_based_on_os.clear()


def generate_corp_reports(vulnerabilities: List) -> None:
    drive.drive_access_tokens[google_user_for_service_account] = {}
    access_token, expiry = drive.generate_drive_api_access_token(google_user_for_service_account)
    if access_token is not None and expiry is not None:
        drive.drive_access_tokens[google_user_for_service_account]['access_token'] = access_token
        drive.drive_access_tokens[google_user_for_service_account]['expiry'] = expiry

    drive_id, folder_id = check_and_create_report_root_folders()
    if drive_id is not None and folder_id is not None:
        corp_windows_folder_id, corp_mac_folder_id = check_and_create_report_corp_folders(drive_id, folder_id)
    else:
        logger.info('Unable to find drive id and folder id')
        exit(-1)

    sheet.sheet_access_tokens[google_user_for_service_account] = {}
    access_token, expiry = sheet.generate_sheet_api_access_token(google_user_for_service_account)
    if access_token is not None and expiry is not None:
        sheet.sheet_access_tokens[google_user_for_service_account]['access_token'] = access_token
        sheet.sheet_access_tokens[google_user_for_service_account]['expiry'] = expiry

    windows_package_vulnerabilities = []
    windows_config_vulnerabilities = []
    mac_package_vulnerabilities = []
    mac_config_vulnerabilities = []

    logger.info('Dividing vulnerabilities into dev, qa, test and prod')
    for vulnerability in vulnerabilities:
        if vulnerability.platform == 'Windows' and vulnerability.vulnerability_type == 'package':
            windows_package_vulnerabilities.append(vulnerability)
        elif vulnerability.platform == 'Windows' and vulnerability.vulnerability_type == 'config':
            windows_config_vulnerabilities.append(vulnerability)
        if vulnerability.platform == 'Mac' and vulnerability.vulnerability_type == 'package':
            mac_package_vulnerabilities.append(vulnerability)
        elif vulnerability.platform == 'Mac' and vulnerability.vulnerability_type == 'config':
            mac_config_vulnerabilities.append(vulnerability)

    vulnerabilities.clear()

    # Windows Packages
    logger.info('Generating reports for High, Medium & Low vulnerabilities for Corp windows packages corp environment')
    if windows_package_vulnerabilities and corp_windows_folder_id is not None:
        generate_windows_package_report('windows_package_%s' % datetime.date.today().isoformat().replace('-', ''), windows_package_vulnerabilities, corp_windows_folder_id, drive_id)
    windows_package_vulnerabilities.clear()

    # Windows Config
    logger.info('Generating reports for High, Medium & Low vulnerabilities for Corp windows config corp environment')
    if windows_config_vulnerabilities and corp_windows_folder_id is not None:
        generate_general_report('Windows_config_%s' % datetime.date.today().isoformat().replace('-', ''), windows_config_vulnerabilities, corp_windows_folder_id, drive_id)
    windows_config_vulnerabilities.clear()

    # Mac Packages
    logger.info('Generating reports for High, Medium & Low vulnerabilities for Corp mac packages corp environment')
    if mac_package_vulnerabilities and corp_mac_folder_id is not None:
        generate_linux_package_report('Mac_package_%s' % datetime.date.today().isoformat().replace('-', ''), mac_package_vulnerabilities, corp_mac_folder_id, drive_id)
    mac_package_vulnerabilities.clear()

    # Mac Config
    logger.info('Generating reports for High, Medium & Low vulnerabilities for Corp mac config corp environment')
    if mac_config_vulnerabilities and corp_mac_folder_id is not None:
        generate_general_report('Mac_config_%s' % datetime.date.today().isoformat().replace('-', ''), mac_config_vulnerabilities, corp_mac_folder_id, drive_id)
    mac_config_vulnerabilities.clear()
